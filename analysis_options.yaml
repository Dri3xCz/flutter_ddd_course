analyzer:
  exclude:
    - '**/injection_container.config.dart'
    - '**/*.mocks.dart'
    - '**/*.freezed.dart'
    - '**/*.g.dart'
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true
  errors:
    missing_required_param: error
    missing_return: error
    invalid_null_aware_operator: error
    dead_code: warning
    unawaited_futures: warning
    unused_element: warning
    unused_local_variable: warning
    deprecated_member_use_from_same_package: warning
    record_literal_one_positional_no_trailing_comma: error
    must_call_super: error
    invalid_use_of_protected_member: error
    # This is just quality of life improvement, so we can generate
    # copyWith methods on entities (which is undesirable in production)
    # and use them only during testing so there is no need to create additional mocks
    invalid_use_of_visible_for_testing_member: error
    unrelated_type_equality_checks: error
    missing_enum_constant_in_switch: error

include: package:flutter_lints/flutter.yaml

linter:
  rules:
    # error
    always_use_package_imports: false
    avoid_dynamic_calls: true
    avoid_empty_else: true
    avoid_print: true
    avoid_relative_lib_imports: false
    avoid_slow_async_io: true
    avoid_type_to_string: true
    avoid_types_as_parameter_names: true
    avoid_web_libraries_in_flutter: true
    cancel_subscriptions: true
    close_sinks: true
    # Sometimes the implementation file is not imported
    # yet the reference in the comment is important
    comment_references: false
    control_flow_in_finally: true
    diagnostic_describe_all_properties: false
    deprecated_member_use_from_same_package: true
    empty_statements: true
    hash_and_equals: true
    implicit_reopen: true
    invalid_case_patterns: true
    collection_methods_unrelated_type: true
    literal_only_boolean_expressions: true
    no_adjacent_strings_in_list: true
    no_duplicate_case_values: true
    no_logic_in_create_state: true
    prefer_relative_imports: true
    prefer_void_to_null: true
    test_types_in_equals: true
    throw_in_finally: true
    unnecessary_statements: true
    unrelated_type_equality_checks: true
    unsafe_html: true
    # Only when needed
    use_build_context_synchronously: true
    use_key_in_widget_constructors: false
    valid_regexps: true

    # style
    always_declare_return_types: true
    unnecessary_library_directive: true
    always_put_control_body_on_new_line: false
    always_put_required_named_parameters_first: false
    always_specify_types: false
    annotate_overrides: true
    avoid_annotating_with_dynamic: false
    avoid_bool_literals_in_conditional_expressions: true
    # Usually we want to raise another exception in the catch
    # clauses regardless of what the original exception might be
    avoid_catches_without_on_clauses: false
    avoid_catching_errors: true
    avoid_classes_with_only_static_members: false
    avoid_double_and_int_checks: true
    avoid_equals_and_hash_code_on_mutable_classes: true
    avoid_escaping_inner_quotes: true
    avoid_field_initializers_in_const_classes: false
    avoid_function_literals_in_foreach_calls: true
    avoid_implementing_value_types: true
    avoid_init_to_null: true
    avoid_js_rounded_ints: true
    avoid_multiple_declarations_per_line: false
    avoid_null_checks_in_equality_operators: true
    avoid_positional_boolean_parameters: true
    avoid_private_typedef_functions: false
    # It triggers false positive on enum values assignment
    avoid_redundant_argument_values: false
    avoid_renaming_method_parameters: true
    avoid_return_types_on_setters: true
    avoid_returning_null_for_void: true
    avoid_returning_this: true
    avoid_setters_without_getters: true
    avoid_shadowing_type_parameters: true
    avoid_single_cascade_in_expression_statements: true
    # Inside building methods this is
    # very much welcome addition
    avoid_types_on_closure_parameters: false
    avoid_unnecessary_containers: true
    avoid_unused_constructor_parameters: true
    avoid_void_async: true
    await_only_futures: true
    camel_case_extensions: true
    camel_case_types: true
    cascade_invocations: true
    # Constants have always been named with ALL_CAPS_WITH_UNDERSCORES
    constant_identifier_names: false
    curly_braces_in_flow_control_structures: true
    deprecated_consistency: true
    directives_ordering: true
    do_not_use_environment: true
    empty_catches: true
    empty_constructor_bodies: true
    eol_at_end_of_file: true
    exhaustive_cases: true
    file_names: true
    flutter_style_todos: false
    implementation_imports: true
    join_return_with_assignment: true
    leading_newlines_in_multiline_strings: true
    library_names: true
    library_prefixes: true
    # No need to make available typedef which are necessary only in one file
    library_private_types_in_public_api: false
    # Test names can be longer
    lines_longer_than_80_chars: false
    missing_whitespace_between_adjacent_strings: true
    no_runtimeType_toString: true
    # DTOs look better with sames property name as the Json keys
    non_constant_identifier_names: false
    noop_primitive_operations: true
    null_check_on_nullable_type_parameter: true
    null_closures: true
    # Helps keep track of what type data are we dealing with
    omit_local_variable_types: false
    one_member_abstracts: false
    only_throw_errors: true
    overridden_fields: true
    # Not every single line has to be commented, because we should
    # always strive to write simple code which would be self documenting
    # https://youtu.be/2a_ytyt9sf8?t=605
    # At the beginning of this project I didn't follow this so there will
    # be an overuse of comments in some parts of this codebase
    package_api_docs: false
    public_member_api_docs: false
    package_prefixed_library_names: true
    # It's just easier to make some changes directly on the parameters
    parameter_assignments: false
    prefer_adjacent_string_concatenation: true
    prefer_asserts_in_initializer_lists: true
    prefer_asserts_with_message: true
    prefer_collection_literals: true
    prefer_conditional_assignment: true
    prefer_const_constructors: true
    prefer_const_constructors_in_immutables: true
    prefer_const_declarations: true
    prefer_const_literals_to_create_immutables: true
    prefer_constructors_over_static_methods: true
    prefer_contains: true
    prefer_double_quotes: false

    # Build methods usually have only single return but
    # need the bloc body due to formatting
    prefer_expression_function_bodies: false
    prefer_final_fields: true
    prefer_final_in_for_each: true
    prefer_final_locals: true
    prefer_final_parameters: false
    prefer_for_elements_to_map_fromIterable: true
    prefer_foreach: true
    # Yes it's better to use normal functions but
    # when used with caution it's can help the readability
    prefer_function_declarations_over_variables: false
    prefer_generic_function_type_aliases: true
    prefer_if_elements_to_conditional_expressions: true
    prefer_if_null_operators: true
    prefer_initializing_formals: true
    prefer_inlined_adds: true
    prefer_int_literals: true
    prefer_interpolation_to_compose_strings: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    prefer_is_not_operator: true
    prefer_iterable_whereType: true
    prefer_mixin: true
    prefer_null_aware_method_calls: true
    prefer_null_aware_operators: true
    prefer_single_quotes: true
    prefer_spread_collections: true
    prefer_typing_uninitialized_variables: true
    provide_deprecation_message: true
    recursive_getters: true
    require_trailing_commas: true
    sized_box_for_whitespace: true
    slash_for_doc_comments: true
    sort_child_properties_last: true
    sort_constructors_first: false
    sort_unnamed_constructors_first: true
    tighten_type_of_initializing_formals: true
    type_annotate_public_apis: true
    type_init_formals: true
    # When showing dialogs the await is not needed
    # and sometimes even undesirable
    unawaited_futures: false
    unnecessary_await_in_return: true
    unnecessary_brace_in_string_interps: true
    unnecessary_const: true
    unnecessary_final: false
    unnecessary_getters_setters: true
    unnecessary_lambdas: true
    unnecessary_new: true
    unnecessary_null_aware_assignments: true
    unnecessary_null_in_if_null_operators: true
    unnecessary_overrides: true
    unnecessary_parenthesis: true
    unnecessary_raw_strings: true
    unnecessary_string_escapes: true
    unnecessary_string_interpolations: true
    # Simply makes code more readable
    # (variables don't appear from nowhere)
    unnecessary_this: false
    unnecessary_to_list_in_spreads: true
    use_colored_box: true
    use_decorated_box: true
    use_enums: true
    use_full_hex_values_for_flutter_colors: true
    use_function_type_syntax_for_parameters: true
    use_if_null_to_convert_nulls_to_bools: true
    use_is_even_rather_than_modulo: true
    use_named_constants: true
    use_raw_strings: true
    use_rethrow_when_possible: true
    use_setters_to_change_properties: true
    use_string_buffers: true
    use_string_in_part_of_directives: true
    use_super_parameters: true
    use_test_throws_matchers: true
    use_to_and_as_if_applicable: true
    void_checks: true

    # Pubspec
    depend_on_referenced_packages: true
    package_names: true
    # It's pretty much irelevant
    secure_pubspec_urls: true
    sort_pub_dependencies: false